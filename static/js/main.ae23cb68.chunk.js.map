{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","useState","latitude","longitude","width","height","zoom","viewport","setViewport","selectedPark","setSelectedPark","useEffect","listener","e","key","addEventListener","removeEventListener","mapResizeEvent","_","throttle","Object","assign","innerWidth","innerHeight","class","mapboxApiAccessToken","mapStyle","onViewportChange","style","position","top","right","showCompass","positionOptions","enableHighAccuracy","trackUserLocation","parkDate","map","park","properties","PARK_ID","geometry","coordinates","className","onClick","preventDefault","src","alt","tipSize","onClose","NAME","DESCRIPTIO","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+yqBAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCAD,WACb,IAD4B,EAGIC,mBAAS,CACvCC,SAAU,QACVC,WAAY,QACZC,MAAO,QACPC,OAAQ,QACRC,KAAM,KARoB,mBAGrBC,EAHqB,KAGXC,EAHW,OAiBYP,mBAAS,MAjBrB,mBAiBrBQ,EAjBqB,KAiBPC,EAjBO,KA+C5B,OA5BAC,qBAAU,WACR,IAAMC,EAAW,SAAAC,GACD,WAAVA,EAAEC,KACJJ,EAAgB,OAKpB,OAFAf,OAAOoB,iBAAiB,UAAWH,GAE5B,WACLjB,OAAOqB,oBAAoB,UAAWJ,MAEvC,IAEHD,qBAAU,WACR,IAAMM,EAAiBC,IAAEC,UAAS,WAChCX,EAAYY,OAAOC,OAAO,G,yVAAd,IACPd,EADO,CAEVH,MAAM,GAAD,OAAKT,OAAO2B,WAAZ,MACLjB,OAAO,GAAD,OAAKV,OAAO4B,YAAZ,YAEP,KAGH,OAFA5B,OAAOoB,iBAAiB,SAAUE,GAE3B,WACLtB,OAAOqB,oBAAoB,SAAUC,MAEtC,CAACV,IAGF,yBAAKiB,MAAM,WACT,kBAAC,IAAD,iBACMjB,EADN,CAEEkB,qBAlDY,iGAmDZC,SAAS,qCAGTC,iBAAkB,SAAApB,GAChBC,EAAYD,MAGd,yBAAKiB,MAAM,MAAMI,MAAO,CAACC,SAAU,WAAYC,IAAK,GAAIC,MAAO,IAC7D,kBAAC,IAAD,CACAC,aAAa,KAKb,kBAAC,IAAD,CACEJ,MAxDa,CACrBC,SAAU,WACVC,IAAK,EACLC,MAAO,GAsDCE,gBAAiB,CAACC,oBAAoB,GACtCC,mBAAmB,IAGtBC,IAAkBC,KAAI,SAAAC,GAAI,OACzB,kBAAC,IAAD,CACExB,IAAKwB,EAAKC,WAAWC,QACrBtC,SAAUoC,EAAKG,SAASC,YAAY,GACpCvC,UAAWmC,EAAKG,SAASC,YAAY,IAErC,4BACEC,UAAU,aACVC,QAAS,SAAA/B,GACPA,EAAEgC,iBACFnC,EAAgB4B,KAGlB,yBAAKQ,IAAI,qBAAqBC,IAAI,yBAKvCtC,EACC,kBAAC,IAAD,CACEP,SAAUO,EAAagC,SAASC,YAAY,GAC5CvC,UAAWM,EAAagC,SAASC,YAAY,GAC7CM,QAAS,EACTC,QAAS,WACPvC,EAAgB,QAGlB,yBAAKc,MAAM,WACT,wBAAIA,MAAM,SAASf,EAAa8B,WAAWW,MAC3C,uBAAG1B,MAAM,YAAYf,EAAa8B,WAAWY,cAG/C,SDxGI,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ae23cb68.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from \"react\";\nimport ReactMapGL, { NavigationControl, GeolocateControl, Marker, Popup } from \"react-map-gl\";\nimport * as parkDate from \"./data/skateboard-parks.json\";\nimport _ from 'lodash';\nimport \"./App.css\";\n\nexport default function App() {\n  const MAP_TOKEN = \"pk.eyJ1Ijoic3VuZ21pbnBhcmsiLCJhIjoiY2sydnZnY2c2MDlkdTNpcWlmeTB6Yjg5ZyJ9.INZT1hkjzW_gTQ3FTi6c-g\";\n\n  const [viewport, setViewport] = useState({\n    latitude: 45.4211,\n    longitude: -75.6903,\n    width: \"100vw\",\n    height: \"100vh\",\n    zoom: 10\n  });\n\n  const geolocateStyle = {\n    position: 'absolute',\n    top: 0,\n    right: 0\n  };\n\n  const [selectedPark, setSelectedPark] = useState(null);\n\n  useEffect(() => {\n    const listener = e => {\n      if (e.key === \"Escape\") {\n        setSelectedPark(null);\n      }\n    };\n    window.addEventListener(\"keydown\", listener);\n\n    return () => {\n      window.removeEventListener(\"keydown\", listener);\n    };\n  }, []);\n\n  useEffect(() => {\n    const mapResizeEvent = _.throttle(() => {\n      setViewport(Object.assign({}, {\n        ...viewport,\n        width: `${window.innerWidth}px`,\n        height: `${window.innerHeight}px`\n      }));\n    }, 2000);\n    window.addEventListener('resize', mapResizeEvent);\n    \n    return () => {\n      window.removeEventListener('resize', mapResizeEvent);\n    }\n  }, [viewport]);\n\n  return (\n    <div class=\"mainMap\">\n      <ReactMapGL\n        {...viewport}\n        mapboxApiAccessToken={MAP_TOKEN}\n        mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n        // mapStyle=\"mapbox://styles/mapbox/dark-v10\"\n\n        onViewportChange={viewport => {\n          setViewport(viewport);\n        }}\n      >\n        <div class=\"nav\" style={{position: 'absolute', top: 31, right: 0}}>\n          <NavigationControl \n          showCompass={false}\n          />\n        </div>\n\n       \n          <GeolocateControl\n            style={geolocateStyle}\n            positionOptions={{enableHighAccuracy: true}}\n            trackUserLocation={true}\n          />\n\n        {parkDate.features.map(park => (\n          <Marker\n            key={park.properties.PARK_ID}\n            latitude={park.geometry.coordinates[1]}\n            longitude={park.geometry.coordinates[0]}\n          >\n            <button\n              className=\"marker-btn\"\n              onClick={e => {\n                e.preventDefault();\n                setSelectedPark(park);\n              }}\n            >\n              <img src=\"/skateboarding.svg\" alt=\"Skate Park Icon\" />\n            </button>\n          </Marker>\n        ))}\n\n        {selectedPark ? (\n          <Popup\n            latitude={selectedPark.geometry.coordinates[1]}\n            longitude={selectedPark.geometry.coordinates[0]}\n            tipSize={5}\n            onClose={() => {\n              setSelectedPark(null);\n            }}\n          >\n            <div class=\"wrapper\">\n              <h2 class=\"title\">{selectedPark.properties.NAME}</h2>\n              <p class=\"discript\">{selectedPark.properties.DESCRIPTIO}</p>\n            </div>\n          </Popup>\n        ) : null}\n      </ReactMapGL>\n    </div>\n  );\n}"],"sourceRoot":""}